@page "/"
@using CTFOh.SQLManagement.Data
@using CTFOh.SQLManagement.Services

@inject IListServices LISTservice
@inject IChallsServices CHALLSservice
@inject DialogService DialogService

<PageTitle>CTFOh - Administration</PageTitle>

<h1>Gestion des CTFs</h1>

<div style="display: flex; align-items: center; margin-bottom: 16px">
    <RadzenButton Click="@ClearSelection" Text="Activer" ButtonStyle="ButtonStyle.Primary"/>
    <div style="margin-left: 10px">
        <RadzenButton Click="@ClearSelection" Text="Supprimer" ButtonStyle="ButtonStyle.Danger"/>
    </div>
     
@if (selectedCTFs?.Any() == true)
{
<div style="margin-left: 16px;">
    CTF Selectionné: @selectedCTFs[0].Name
</div>
}
<div class="rz-p-12 rz-text-align-center">
    <RadzenButton Text=@($"Order {orderID} details") ButtonStyle="ButtonStyle.Secondary" Click=@OpenOrder />
</div>

@code {
    int orderID = 10248;

    public async Task OpenOrder()
    {
        await DialogService.OpenAsync<DialogCardPage>($"Order {orderID}",
            new Dictionary<string, object>() { { "OrderID", orderID } },
            new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }

}
</div>

<RadzenDataGrid AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
            AllowSorting="true" Data="@RCTFLists" TItem="CTFList" ColumnWidth="200px"
            SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedCTFs>
    <Columns>
        <RadzenDataGridColumn TItem="CTFList" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="CTFList" Property="Name" Title="Nom" />
        <RadzenDataGridColumn TItem="CTFList" Property="Dstart" Title="Date de début" />
        <RadzenDataGridColumn TItem="CTFList" Property="Dend" Title="Date de fin" />
        <RadzenDataGridColumn TItem="CTFList" Property="Select" Title="Actif Actuellement" />
    </Columns>
</RadzenDataGrid>

@code {
    List<CTFList> RCTFLists;
    IList<CTFList> selectedCTFs;

    void ClearSelection()
    {
        selectedCTFs = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        RCTFLists = await LISTservice.GetListAsync();
        foreach (var takeActif in RCTFLists)
        {
            if (takeActif.Select == 1)
            {
                selectedCTFs = RCTFLists.Take(takeActif.Id - 1).ToList();
            }
        }
    }
}

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>CTF Id</th>
                    <th>Name</th>
                    <th>DStart</th>
                    <th>DEnd</th>
                    <th>Select</th>
                    <th>Delete CTF</th>
                    <th>Load CTF</th>
                </tr>
            </thead>
            <tbody>
                @if (ListCTFs.Any())
                {
                    @foreach (var product in ListCTFs)
                    {
                        <tr>
                            <td>@product.Id</td>
                            <td>@product.Name</td>
                            <td>@product.Dstart</td>
                            <td>@product.Dend</td>
                            <td>@product.Select</td>
                            <td><RadzenButton @onclick="(() => DeleteCTF(product))">Delete</RadzenButton></td>
                            <td><RadzenButton Click=@(() => LoadCTF(product))>Load</RadzenButton></td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>No CTFs available</strong></td></tr>
                }
            </tbody>
        </table>
    </div>
    
</div>

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Challs Id</th>
                    <th>Name</th>
                    <th>Actif</th>
                    <th>Challs</th>
                    <th>Order</th>
                    <th>StrictOrder</th>
                    <th>LinkedCTF</th>
                </tr>
            </thead>
            <tbody>
                @if (Challs.Any())
                {
                    @foreach (var product in Challs)
                    {
                        @if (@product.LinkedCTF == CTFSelect) {
                            <tr>
                                <td>@product.Id</td>
                                <td>@product.Name</td>
                                <td>@product.Actif</td>
                                <td>@product.Chall</td>
                                <td>@product.Order</td>
                                <td>@product.StrictOrder</td>
                                <td>@product.LinkedCTF</td>
                            </tr>
                        }
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>No Challs available</strong></td></tr>
                }
            </tbody>
        </table>
    </div>
    
</div>

@code {

    List<CTFList> ListCTFs = new List<CTFList>();
    List<CTFListChalls> Challs = new List<CTFListChalls>();
    int CTFSelect = 0;

    private async Task RefreshCTF()
    {
        ListCTFs = await LISTservice.GetListAsync();
        if (ListCTFs.Any())
        {
            foreach (var product in ListCTFs)
            {
                if (product.Select == 1)
                {
                    CTFSelect = product.Id;
                    await RefreshChalls();
                }
            }
        }
    }

    public CTFList NewCTF { get; set; } = new CTFList();
    private async Task AddNewCTF()
    {
        await LISTservice.AddListAsync(NewCTF);
        NewCTF = new CTFList();
        await RefreshCTF();
    }
    

    private async Task DeleteCTF(CTFList ListCTF)
    {
        await LISTservice.DeleteListAsync(ListCTF);
        await RefreshCTF();
    } 
    
    private async Task LoadCTF(CTFList ListCTF)
    {
        ListCTFs = await LISTservice.GetListAsync();
        if (ListCTFs.Any())
        {
            foreach (var product in ListCTFs)
            {
                product.Select = 0;
                await LISTservice.UpdateListAsync(product);
            }
        }
        ListCTF.Select = 1;
        await LISTservice.UpdateListAsync(ListCTF);
        await RefreshCTF();
    }

    private async Task RefreshChalls()
    {
        Challs = await CHALLSservice.GetListChallsAsync();
    }

}